@model FY111.Dtos.LogsDto

@{
    ViewData["Title"] = "Log";
}


<div class="row">
    <div class="col-xl-4 col-lg-5">
        <div id="ClassCount" style="width:100%;height:350px;" :lazy='true'></div>
    </div>
    <div class="col-xl-8 col-lg-7">
        <div id="LoginLog" style="width:100%;height:350px;" :lazy='true'></div>
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">@Localizer["詳細資料"]</h6>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                <div class="col-sm-12">
                    <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;">
                        <thead>
                            <tr role="row">
                                <th>
                                    @Html.DisplayNameFor(model => model.@class[0].ClassUnits.ElementAt(0).ClassLittleunits.ElementAt(0).Name)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.UnitLog[0].OperationLittleunitLogs.ElementAt(0).LittleunitCode)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.UnitLog[0].OperationLittleunitLogs.ElementAt(0).Pass)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.UnitLog[0].OperationLittleunitLogs.ElementAt(0).Score)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.UnitLog[0].OperationLittleunitLogs.ElementAt(0).StartTime)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.UnitLog[0].OperationLittleunitLogs.ElementAt(0).EndTime)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var unitlog in Model.UnitLog) {
                                @foreach (var item in unitlog.OperationLittleunitLogs)
                                {
                                    <tr>
                                        <td>
                                            @(Model.@class.FirstOrDefault(x => item.LittleunitCode.StartsWith(x.Code)).ClassUnits
                                            .FirstOrDefault(x => item.LittleunitCode.StartsWith(x.Code)).ClassLittleunits
                                            .FirstOrDefault(x => item.LittleunitCode.StartsWith(x.Code)).Name)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.LittleunitCode)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Pass, "ToBool")
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Score)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.StartTime)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.EndTime)
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.2/dist/echarts.min.js">
        const { type } = require("jquery");
    </script>

    <script type="text/javascript">
        var myChart1 = echarts.init(document.getElementById('ClassCount'));

        var option1 = {
            @{
                var classNames = Model.@class.Select(x => x.Name).ToList();
                }
            @{
                var classLogCount = new List<int>(new int[Model.@class.Count]);
                for(int i = 0; i < classLogCount.Count; i++){
                    classLogCount[i] = Model.@class[i].ClassLogs.Count();
                }
            }
            title: {
                text: '@Localizer["進入課程次數"]',
                textStyle: {
                    color: '#4E73DF'
                }
            },
            tooltip: {
                trigger: 'item'
            },
            /*legend: {
                top: '5%',
                left: 'center'
            },
            series: [{
                type: 'pie',
                radius: ['40%', '70%'],
                avoidLabelOverlap: false,
                itemStyle: {
                    borderRadius: 10,
                    borderColor: '#fff',
                    //borderWidth: 2
                },
                label: {
                    show: false,
                    position: 'center'
                },
                emphasis: {
                    label: {
                        show: true,
                        fontWeight: 'bold'
                    }
                },
                labelLine: {
                    show: false
                },
                data:[
                    @*for(int i = 0; i < classLogCount.Count; i++){
                        @Html.Raw($"{{value: {Json.Serialize(classLogCount[i])}, name: {Json.Serialize(classNames[i])}}},")
                    }*@
                ]
            }]*/
            xAxis: {
                data: @Html.Raw(Json.Serialize(classNames)), // ['工廠', '手術', '會議', '教室']
                axisLabel : {
                    interval : 0,
                    formatter : function(params, index){
                        if (index % 2 != 0) {
                            return '\n\n' + params;
                        }
                        else {
                            return params;
                        }
                    }
                }
            },
            yAxis: {
                interval: 1
            },
            series: [
                {
                    name: '@Localizer["次數"]',
                    type: 'bar',
                    colorBy: 'data',
                    data: [
                        @for(int i = 0; i < classLogCount.Count; i++){
                            @Html.Raw($"{{value: {Json.Serialize(classLogCount[i])}}},")
                        }
                        /*{
                            value: 13,
                            itemStyle: {
                                color: '#FF6384'
                            }
                        },
                        {
                            value: 21,
                            itemStyle: {
                                color: '#36A2EB'
                            }
                        },
                        {
                            value: 27,
                            itemStyle: {
                                color: '#FFCD56'
                            }
                        },
                        {
                            value: 36,
                            itemStyle: {
                                color: '#9B69BA'
                            }
                        },*/
                    ]
                }
            ]
        };

        var myChart2 = echarts.init(document.getElementById('LoginLog'));

        var option2 = {
            title: {
                text: '@Localizer["登入時間分布"]',
                textStyle: {
                    color: '#4E73DF'
                }
            },
            xAxis: {
                type: 'category',
                data: ['@Localizer["1月"]', '@Localizer["2月"]', '@Localizer["3月"]', '@Localizer["4月"]', '@Localizer["5月"]', '@Localizer["6月"]'
                , '@Localizer["7月"]', '@Localizer["8月"]', '@Localizer["9月"]', '@Localizer["10月"]', '@Localizer["11月"]', '@Localizer["12月"]']
            },
            yAxis: {
                type: 'value',
                interval: 1
            },
            series: [
                {
                    @{
                        var loginLogValues = new List<int>(new int[12]);
                        for(int i = 1; i <= 12; i++){
                            loginLogValues[i-1] = Model.LoginLog.Where(x => x.StartTime.Month == i).Count();
                        }
                    }
                    data: @Html.Raw(Json.Serialize(loginLogValues)),
                    type: 'line',
                    smooth: true
                }
            ]
            /*title: {
                text: 'Device Chart',
                textStyle: {
                    color: '#4E73DF'
                }
            },
            tooltip: {
                trigger: 'item'
            },
            legend: {
                orient: 'vertical',     //圖例垂直排序
                x: 'right'
            },
            series: [
                {
                    name: 'Quantity',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    itemStyle: {
                        borderRadius: 10,
                        borderColor: '#fff',
                        borderWidth: 2
                    },
                    label: {
                        show: false,
                        position: 'center'
                    },
                    emphasis: {
                        label: {
                            show: true,
                            fontSize: '30',
                            fontWeight: 'bold'
                        }
                    },
                    labelLine: {
                        show: false
                    },
                    data: [
                        { value: 3, name: 'PC' },
                        { value: 3, name: 'Phone' },
                        { value: 3, name: 'AR' },
                        { value: 3, name: 'VR' }
                    ]
                }
            ]*/
        };

        myChart1.setOption(option1);
        myChart2.setOption(option2);
        window.onresize = function () {
            myChart1.resize();
            myChart2.resize();
        }
    </script>
}